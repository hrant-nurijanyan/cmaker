#!/usr/bin/python3

import argparse
import os

parser = argparse.ArgumentParser(description="Generate C++ CMakeProject based on arguments provided")
parser.add_argument('name',help="Name of the project")
parser.add_argument('-s','--standard',help="C++ standard of the project",type=str)
parser.add_argument('-cv','--cmake_version',help="Version of the cmake",type=str)
parser.add_argument('-l','--lib',help= "If provided a static library cmake is generated",action='store_true')

standards = ['03','11','14','17','20','23']

args = parser.parse_args()

if args.standard is not None:
    if args.standard not in standards:
        raise ValueError(f'Invalid standard only {standards} are supported but current value is {args.standard}')
else:
    args.standard = '17' # defaulting to 17 standard of C++

name = args.name
isLib = args.lib
standard = args.standard
cmake_version = args.cmake_version or '3.23' # defaulting to cmake 3.23

# Creating directory if not exists
if not os.path.exists(name):
    os.mkdir(name)

os.chdir(name)

# Creating CMakeLists.txt
with open('CMakeLists.txt','w') as CMakeLists:
    content = f'''cmake_minimum_required(VERSION {cmake_version})

project({name})

set(CMAKE_CXX_STANDARD {standard})

'''
    content += f'add_library({name} main.cpp)' if isLib else f'add_executable({name} main.cpp)'
    CMakeLists.write(content)

# Creating main.cpp
with open('main.cpp','w') as main_cpp:
    content = '''#include <iostream>

// Project generated by cmaker 
int main()
{
    std::cout<<"Hello World!"<<std::endl;
    return 0;
}
'''
    main_cpp.write(content)




    

